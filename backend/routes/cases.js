const express = require("express");
const { body } = require("express-validator");
const router = express.Router();
const casesController = require("../controllers/cases");

/**
 * @swagger
 * tags:
 *   name: Case
 *   description: API endpoints for managing cases
 */

/**
 * @swagger
 * components:
 *     schemas:
 *      Case:
 *       type: object
 *       properties:
 *         practiceLocationId:
 *           type: integer
 *         categoryId:
 *           type: integer
 *         purposeOfVisitId:
 *           type: integer
 *         caseTypeId:
 *           type: integer
 *         doa:
 *           type: string
 *           format: date
 *         insuranceId:
 *           type: integer
 *         firmId:
 *           type: integer
 * @swagger
 *  /case/{caseId}:          
 *   put:
 *     summary: Update one case.
 *     tags: [Case]
 *     parameters:
 *       - in: path
 *         name: caseId
 *         schema:
 *           type: integer
 *         required: true
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               practiceLocationId:
 *                 type: integer
 *               categoryId:
 *                 type: integer
 *               purposeOfVisitId:
 *                 type: integer
 *               caseTypeId:
 *                 type: integer
 *               doa:
 *                 type: string
 *                 format: date
 *               insuranceId:
 *                 type: integer
 *               firmId:
 *                 type: integer
 *     description: Update the case wiith the given id.
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Case Updated.
 *         content:
 *           application/json:
 *              schema:
 *                type: object
 *                items:
 *                  $ref: '#/components/schemas/Cases'
 *       401:
 *         description: Unauthorized. Authentication token is missing or invalid.
 *       404:
 *         description: No Case found.
 * @swagger
 *  /case/:
 *   post:
 *      summary: Add single case to case table.
 *      tags: [Case]
 *      requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               purposeOfVisitId:
 *                 type: integer
 *               doa:
 *                 type: string
 *                 format: date
 *               firmId:
 *                 type: integer
 *               insuranceId:
 *                 type: integer
 *               patientId:
 *                 type: integer 
 *               practiceLocationId:
 *                 type: integer
 *               caseTypeId:
 *                 type: integer
 *               categoryId:
 *                 type: integer
 *      description: Add case to the case table while the unique caseId is generated by default.
 *      security:
 *        - bearerAuth: []
 *      responses:
 *        200:
 *          description: Case added and Case Id generated.
 *        500:
 *          desciption: Internal Server Error. 
 * @swagger
 *  /case/{id}:
 *   delete:
 *     summary: Soft Deletes the case with passed id
 *     tags: [Patient]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type:
 *             integer
 *         required: true
 *     description: Soft deletes the case.Current time stamp is added in the deleted attribute of the given case Id.
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       201:
 *         description: Cases Successfuly deleted!.
 *       409:
 *         description: To delete this case, first delete its appointments. 
 *       500:
 *         description: Internal Server Error  
 * @swagger
 *  /case/cases:
 *   get:
 *     summary: Get a list of all Cases
 *     tags: [Case]
 *     description: Retrieve list of all cases.
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: A list of Cases.
 *       404:
 *         description: No Case found.  
 * @swagger
 *  /case/case/{id}:
 *   get:
 *     summary: Get single Case Id
 *     tags: [Case]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *     description: Get specific case based on Case Id (passed as parameters) 
 *     security:
 *      - bearerAuth: []
 *     responses:
 *       200:
 *         description: No such appointment Id exists!
 *         content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/Case'
 *       400:
 *         description: No such appointment Id exists!
*/


router.get("/cases", casesController.getAll)
router.get("/:id", casesController.getCase)

router.post("/", casesController.addCase);

router.put("/:id",casesController.updateCase);

router.delete("/:id",casesController.deleteCase)

module.exports = router;
